1# Virtual Environment Created using pipenv
-> pipenv
-> pipenv install Django
-> pipenv shell
-> pip show Django

2# Django Setup | Run Server:
-> django-admin startproject image_sharer .
-> python manage.py runserver


3# Admin User setup 
-> python manage.py createsuperuser
https://127.0.0.1:8000/admin
username : admin
password : 123
email : admin@gmail.com

4# Make or create an app
-> django-admin startapp feed
goto settings and include 'feed', in the INSTALLED_APPS

5# Create Django Models -> models.py and register models in admin.py and apply migrations
-> python manage.py makemigrations
-> python manage.py migrate


6# Setting up Urls path and views
create a file name urls.py in app called feed
create a namespace in urls.py file
create a classy class based view HomePageView in views.py and linked it with urls.py urls_patterns
app urls.py file linked or include with site urls.py using namespace and app_urls

7# setting up templates folder and create base template:
Add path to TEMPLATES -> 'DIRS' in settings.py
Create a folder named it templates nearer to manage.py and create html files in it and use it

8# Template blocks:
Create a Page title using Title block, and content using body block
{% block title%}Default{% endblock %}

9# Adding custom context data:
using get_context_data()    		-> views.py
using django dynamic variables	-> home.html


10# Displaying dynamic posts:
first of all add two to three posts using admin panel
using get_context_data() And post models			  -> views.py
Display dynamic posts in the form of django loop  -> home.html


11# Adding Images to Model:
install django packages sorl-thumbnail for display image in the form of thumbnail in the virtual environment
-> pip install sorl-thumbnail				# docs -> https://github.com/jazzband/sorl-thumbnail
Then register 'sorl.thumbnail', in the 'INSTALLED_APPS' section of your project's settings.
'sorl.thumbnail',
Add ImageField in the models.py using sorl.thumbnail package
other required package: Pillow
-> pip install Pillow
After that apply migrations and image option will be visible in admin panel


12# Setting up Media Folder
goto setting.py, update, make media_url and media_root of media directory and add setting in urls pattern of urls.py
Goto admin and add a new post image -> Done

13# Adding images to templates 
copy code Templates Usage and simple usage from https://github.com/jazzband/sorl-thumbnail and modify it accordingly -> home.html
Now add posts from admin-panel and see the effects


14# Adding a detail view and detail view templates
https://ccbv.co.uk/projects/Django/4.0/django.views.generic.detail/DetailView/  use of Detail View
create a classy class based detail view class -> views.py
link class with the urls.py and also use post id as primary key
create a new template called detail.html and display full image by rendering data from models

check from admin panel post id and view such as
http://127.0.0.1:8000/detail/11/

15# Linking to views from templates | Made content clickable | Templates linking
use of {% url 'app_name:name' %}  

16# Adding an Upload Form   : source: https://ccbv.co.uk/projects/Django/4.0/django.views.generic.edit/FormView/ 
Create a forms.py file in an app and define form fields
create a classy class based view in views.py, linked with class PostForm of forms.py and make form valid
update path in urls.py
create a new_post.html template and display an upload form
home template link with post


17# Sorting default posts Order
goto views.py
use .order_by('-id') in context_data of HomePageView class

18# Success Messages Framework
rources used: https://docs.djangoproject.com/en/4.1/ref/contrib/messages/
use django messages framework for showing success message
Display Success Messages in the form of Session using Django messages framework in the basic template


19# Add Bootstrap to Django
link bootstrap cdn -> base.html
Adding Navbar -> base.html
remove extra template linkings | clean code  -> home.html, detail.html
Make post content in a center using container -> base.html
use of include in the templates -> navbar.html
use of cards for posts and make them in a gird of 3 columns   -> home.html
make full image responsive -> detail.html
beautify upload form page -> new_post.html
Beautify Success Message box using background and colors
what if tere is not post link to new post-> home.html

all Done!!

Create a requirements.txt file which contains all packages named that are used in the project